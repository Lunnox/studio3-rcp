<project name="customTargets overrides" default="noDefault">
	<import file="${eclipse.pdebuild.templates}/headless-build/customTargets.xml" />
	<taskdef resource="net/sf/antcontrib/antlib.xml">
		<classpath>
			<pathelement location="${builder}/ant-contrib/ant-contrib.jar" />
		</classpath>
	</taskdef>

	<!-- ===================================================================== -->
	<!-- Steps to do before generating the build scripts. -->
	<!-- ===================================================================== -->
	<target name="preGenerate">
		<!-- Need to grab version qualifier for scripting plugin, we do that by cloning and checking 
		last commit of each bundle vs last commit of plugin. This MUST be done before the generateScript target
		or else the qualifier we insert into build.properties is ignored.  -->
		<property name="scripting.plugin" value="com.aptana.studio.rubles"/>
		<property name="scripting.plugin.dir" location="${buildDirectory}/plugins/${scripting.plugin}"/>
		<property name="bundle.timestamps.file" location="${scripting.plugin.dir}/bundle_timestamps.txt"/>

		<!-- Find latest commit date between this plugin and every bundle and use that as the build qualifier! -->
		<exec executable="/bin/bash" dir="${workspace}/plugins/${scripting.plugin}" append="true" output="${bundle.timestamps.file}">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct,' ." />
		</exec>

		<!-- Pull down the cache pre-generation scripts -->
		<delete dir="${scripting.plugin.dir}/bundles/studio3-sdk" failonerror="true" />
		<echo message="git clone git://github.com/aptana/studio3-sdk.git" />
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/studio3-sdk.git" />
		</exec>
		<property name="cache.generator.script" location="${scripting.plugin.dir}/bundles/studio3-sdk/tools/bundle_cache_generator/main.rb"/>
		<!-- TODO Checkout the correct branch of the generator scripts... -->

		<!-- Grab the pre-defined set of bundles -->
		<parallel>
			<antcall target="clone-bundle">
				<param name="bundle.name" value="yaml.ruble" />
				<param name="bundle.dir.name" value="yaml.ruble" />
				<param name="bundle.branch" value="${scs.branch.name}" />
			</antcall>
			<antcall target="clone-bundle">
				<param name="bundle.name" value="math.ruble" />
				<param name="bundle.dir.name" value="math.ruble" />
				<param name="bundle.branch" value="${scs.branch.name}" />
			</antcall>
		</parallel>
		
		<!-- Delete the pre-generation of cache scripts repo clone -->
		<delete dir="${scripting.plugin.dir}/bundles/studio3-sdk" failonerror="true" />
		
		<!-- Now grab the max value of lastmods in bundle_timestamps.txt file and use that as qualifier! -->
		<script language="javascript">
			<![CDATA[
					importPackage(java.lang, java.util, java.io);

					// The main method (called from the bottom of the file).
					function main() {
						var basedir = project.getProperty("scripting.plugin.dir");
						
						var timestamps = new File(basedir, "bundle_timestamps.txt");
						var reader = new BufferedReader(new FileReader(timestamps));
					    var line = reader.readLine();
						System.out.println(line);
						reader.close();
						var max = 0;
						var numbers = line.split(",");
						for (var i = 0; i < numbers.length; i++) {
							new_number = parseInt(numbers[i]);
							if (new_number > max)
							{
								max = new_number;
							}
						}
						System.out.println("Max timestamp of scripting plugin and bundles: " + max);
					    // Write the max number into the qualifier!
					    var writer = new FileWriter(new File(basedir, "build.properties"), true);
						writer.write("qualifier = " + max + "\n");
						writer.close();
					}

					main();
				]]>
				</script>
	</target>

	<target name="clone-bundle">
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true" />
		<echo message="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" level="info" />
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles" failonerror="true">
			<arg value="-c" />
			<arg value="git clone git://github.com/aptana/${bundle.name}.git ${bundle.dir.name}" />
		</exec>
		<!-- Checkout the specified branch -->
		<echo message="git checkout ${bundle.branch}" level="info" />
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" failonerror="true">
			<arg value="-c" />
			<arg value="git checkout ${bundle.branch}" />
		</exec>
		<!-- Grab lastmod and append it to file containing all of the lastmods for each packaged ruble -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}" append="true" output="${bundle.timestamps.file}" failonerror="true">
			<arg value="-c" />
			<arg value="git log --max-count=1 --pretty=format:'%ct,' ." />
		</exec>

		<!-- Now remove the .git subdirectory -->
		<delete dir="${scripting.plugin.dir}/bundles/${bundle.dir.name}/.git" quiet="true" />
		
		<!-- Now pre-generate the cache files! -->
		<exec executable="/bin/bash" dir="${scripting.plugin.dir}/bundles/studio3-sdk/tools/bundle_cache_generator" failonerror="true">
			<arg value="-c" />
			<arg value="${ruby.executable} -KU ${cache.generator.script} ${scripting.plugin.dir}/bundles/${bundle.dir.name}" />
		</exec>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before setup -->
	<!-- ===================================================================== -->
	<target name="preSetup">
		<antcall target="replaceVersions" />
	</target>

	<target name="replaceVersions">
		<tstamp>
			<format property="timestamp" pattern="dd MMMM yyyy, HH:mm:ss" locale="en" />
		</tstamp>
		<tstamp>
			<format property="short.timestamp" pattern="ddMMyyyyHHmmss" locale="en" />
		</tstamp>
		<echo message="Updating versions in feature and plugin manifests. Full version: ${version.full}, qualifier: ${build.revision}" />
		<!-- Replace very specific files (taken from our old build) -->
		<replace file="${buildDirectory}/plugins${product}" token="0.0.0.qualifier" value="${version.full}-${short.timestamp}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="0.0.0.qualifier" value="${version.full}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%timestamp%" value="${timestamp}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%branch.name%" value="${env.GIT_BRANCH}" />
		<replace file="${buildDirectory}/plugins/com.aptana.rcp/plugin.properties" token="%build.tag%" value="${env.BUILD_TAG}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/feature.properties" token="build.name" value="${build.name}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/rootfiles/version.txt" token="0.0.0" value="${version.full}" />
		<replace file="${buildDirectory}/features/com.aptana.feature.rcp/rootfiles/version.txt" token=".qualifier" value="${build.revision}" />
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before the repositories are being processed -->
	<!-- ===================================================================== -->
	<target name="preProcessRepos">
		<p2.mirror destination="file:${repoBaseLocation}/mirrored">
			<source location="${studio3.p2.repo}" />
			<source location="${php.p2.repo}" />
			<source location="${pydev.p2.repo}" />
			<source location="${radrails.p2.repo}" />
			<iu id="com.aptana.feature.feature.group" />
			<iu id="com.aptana.php.feature.feature.group" />
			<iu id="com.aptana.pydev.feature.feature.group" />
			<iu id="org.radrails.rails.feature.group" />
		</p2.mirror>
	</target>

	<!-- ===================================================================== -->
	<!-- Steps to do before running package. -->
	<!-- ===================================================================== -->
	<target name="prePackage">
		<!-- Wipe and recreate deploy dir -->
		<delete dir="${deploy.dir}" failonerror="false" />
		<mkdir dir="${deploy.dir}" />

		<!-- Sign the JARs once before we generate standalones -->
		<antcall target="signJars" />
	</target>

	<!-- This is a hack to workaround https://bugs.eclipse.org/bugs/show_bug.cgi?id=255518 -->
	<!-- We need to do our own signing here so we can limit the JARs it applies to -->
	<target name="signJars" if="sign.jars">
		<echo message="Signing plugins and features at: ${buildDirectory}/buildRepo" />
		<!-- Load the final version strings for all features and plugins... 
			this stores the feature/plugin id as key and the version string as the value, which we use below in the script...
		-->
		<property name="p2.build.repo" value="file:${buildDirectory}/buildRepo" />
		<property file="${buildDirectory}/finalFeaturesVersions.properties" />
		<property file="${buildDirectory}/finalPluginsVersions.properties" />

		<script description="Sign specific feature/plugin JARs" language="javascript">
			<![CDATA[
				importPackage(Packages.org.eclipse.equinox.p2.internal.repository.tools.tasks);
			
				var featureIds = project.getProperty("sign.features");
				var pluginIds = project.getProperty("sign.plugins");
				if ( featureIds.length() > 0 || pluginIds.length() > 0) {
			
					// We're going to call p2.process.artifacts to sign the JARs
		            var processArtifacts = project.createTask("p2.process.artifacts");
					processArtifacts.setRepositoryPath(project.getProperty("p2.build.repo"));
					
					//var sign = processArtifacts.createSign("sign");
					var sign = new ProcessRepoTask.SigningOptions();
					sign.setAlias(project.getProperty("sign.alias"));
					sign.setKeystore(project.getProperty("sign.keystore"));
					sign.setStorepass(project.getProperty("sign.keypass"));
			
					processArtifacts.addConfiguredSign(sign);
			
					// Split the plugin and feature id list by comma delimiter 
		            var features = project.getProperty("sign.features").split(",");
					var plugins = project.getProperty("sign.plugins").split(",");
			
					// Specify the features
		            for (var i = 0; i < features.length; i ++) {
						//var feature = processArtifacts.createFeature("feature");
						var feature = new IUDescription();
						feature.setId(features[i]);
						feature.setVersion(project.getProperty(features[i]));
						//processArtifacts.addFeature(feature);
						processArtifacts.addConfiguredFeature(feature);
		            }
			
					// Now specify the plugins
					for (var i = 0; i < plugins.length; i ++) {
						//var plugin = processArtifacts.createPlugin("plugin");
						var plugin = new IUDescription();
						plugin.setId(plugins[i]);
						plugin.setVersion(project.getProperty(plugins[i]));
						processArtifacts.addConfiguredPlugin(plugin);
		            }
			
					processArtifacts.execute();
				}
	            ]]>
			</script>
		</target>

		<!-- ===================================================================== -->
		<!-- Steps to do after the build is done. -->
		<!-- ===================================================================== -->
		<target name="postBuild">
			<antcall target="gatherLogs" />
			<antcall target="publish" />
		</target>

		<!-- ===================================================================== -->
		<!-- Steps to do to publish the build results -->
		<!-- ===================================================================== -->
		<target name="publish">
			<!-- Create the update site zip file -->
			<zip destfile="${builder}/${topLevelElementId}-${version.full}.zip">
				<fileset dir="${deploy.dir}" defaultexcludes="false" />
			</zip>
			<move file="${builder}/${topLevelElementId}-${version.full}.zip" todir="${deploy.dir}" />
			<!-- Rename the standalone zip files! -->
			<move todir="${deploy.dir}">
				<fileset dir="${buildDirectory}/${buildLabel}">
					<include name="*.zip" />
				</fileset>
				<mapper type="regexp" from="^(\d+\-)(.+)\.zip$$" to="studio3.\2.zip" />
			</move>
			<!-- Create a version.txt file containing the final version string -->
			<echo message="${version.full}" file="${deploy.dir}/version.txt" />
			<!-- copy over index.html file -->
			<replace token="ZIP_FILE" value="${topLevelElementId}-${version.full}.zip" file="${builder}/update_site/index.html" />
			<move file="${builder}/update_site/index.html" tofile="${deploy.dir}/index.html" />

			<!-- Check for JDT plugins -->
			<pathconvert property="jdt.found" setonempty="false">
				<path>
					<fileset dir="${deploy.dir}/plugins" includes="org.eclipse.jdt.*" />
				</path>
			</pathconvert>
			<fail message="Generated p2 repo contains JDT plugins!" if="jdt.found" />
			<!-- copy over index.html file -->
		</target>
	</project>
